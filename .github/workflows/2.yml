name: "üîÑ Manuten√ß√£o Unificada (Playlists + Limpeza + Deploy)"

on:
  schedule:
    - cron: '0 3 * * *'  # Diariamente √†s 00:00 BRT - Playlists
    - cron: '0 15 * * *'  # 12:00 BRT - Limpeza de arquivos
    - cron: '1 */8 * * *' # A cada 8 horas - Limpeza de execu√ß√µes
    - cron: '25 10 * * *' # 07:25 BRT - Deploy
  workflow_dispatch:
    inputs:
      force_operation:
        description: 'For√ßar opera√ß√£o espec√≠fica'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - playlists
          - cleanup_files
          - cleanup_runs
          - deploy

env:
  TZ: America/Fortaleza
  PYTHONUNBUFFERED: 1

permissions:
  contents: write
  actions: write
  pages: write
  id-token: write

jobs:
  # ‚úÖ 1. JOB: Processamento de Playlists (CORRIGIDO)
  process-playlists:
    name: "üì• Processar Playlists"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    if: >-
      (github.event.inputs.force_operation == 'all' ||
      github.event.inputs.force_operation == 'playlists') ||
      (github.event_name == 'schedule' && github.event.schedule == '0 3 * * *')
    
    steps:
      - name: "üîΩ Checkout Padr√£o"
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 1

      - name: "üêç Configurar Python com Cache"
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: "‚öôÔ∏è Instalar Depend√™ncias R√°pido"
        run: |
          pip install --upgrade pip
          pip install requests beautifulsoup4

      - name: "‚ñ∂Ô∏è Executar Scripts de Playlist"
        run: |
          # Fun√ß√£o para executar script com tratamento de erro
          run_playlist_script() {
            local script=$1
            if [[ -f "$script" ]]; then
              echo "üîÑ Executando: $script"
              if python "$script"; then
                echo "‚úÖ $script conclu√≠do com sucesso"
                return 0
              else
                echo "‚ö†Ô∏è $script encontrou erros"
                return 1
              fi
            else
              echo "‚ÑπÔ∏è $script n√£o encontrado, pulando"
              return 0
            fi
          }
          
          # Executar scripts sequencialmente para evitar conflitos
          run_playlist_script "playlists.py"
          # run_playlist_script "playlists2.py"
          # run_playlist_script "Playlist.py"

      - name: "‚è±Ô∏è Adicionar Timestamp"
        run: |
          timestamp=$(TZ='America/Fortaleza' date '+%d/%m/%Y - %H:%M:%S')
          echo "üïê Adicionando timestamp: $timestamp"
          
          # Adicionar timestamp aos arquivos de playlist
          for file in *.m3u *.xml.gz; do
            if [[ -f "$file" ]]; then
              echo -e "\n\n# Atualizado em $timestamp BRT" >> "$file"
              echo "üìù Timestamp adicionado: $file"
            fi
          done

      - name: "üíæ Commit das Altera√ß√µes"
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global pull.rebase false
          
          # Verificar mudan√ßas
          if git status --porcelain | grep -q .; then
            echo "üì¶ Arquivos modificados detectados"
            git add -A
            git commit -m "üîÑ Atualiza√ß√£o autom√°tica das playlists $(TZ='America/Fortaleza' date '+%d/%m %H:%M')"
            
            # Sincronizar com remote
            git pull origin main --no-edit || true
            git push "https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git" main
            echo "‚úÖ Altera√ß√µes commitadas e enviadas"
          else
            echo "‚úÖ Nenhuma altera√ß√£o detectada"
          fi

  # ‚úÖ 2. JOB: Limpeza de Arquivos (CORRIGIDO)
  cleanup-files:
    name: "üóëÔ∏è Limpar Arquivos Tempor√°rios"
    runs-on: ubuntu-latest
    needs: process-playlists
    timeout-minutes: 10
    
    if: >-
      (github.event.inputs.force_operation == 'all' ||
      github.event.inputs.force_operation == 'cleanup_files') ||
      (github.event_name == 'schedule' && github.event.schedule == '0 15 * * *')
    
    steps:
      - name: "üîΩ Checkout"
        uses: actions/checkout@v4

      - name: "üóëÔ∏è Limpeza de Arquivos Tempor√°rios"
        run: |
          echo "üîç Iniciando limpeza de arquivos tempor√°rios..."
          
          # Lista de arquivos essenciais para N√ÉO deletar
          essential_files=(
            "README.md" ".gitignore" "index.html" "script.js" "style.css"
            "deploy.py" "playlists.py" "playlists2.py" "Playlist.py"
            "downloads_files.py" "generate_metadata.js" "files_metadata.json"
            ".github" "CNAME" "_config.yml"
          )
          
          # Padr√µes de arquivos para deletar
          patterns_to_remove=(
            "coroa_vidaloka-*.mp4"
            "majormarra-*.mp4"
            "marinahelenabr-*.jpg"
            "*-*-*.jpg" "*-*-*.mp4" "*-*-*.png"
            "temp_*" "*.tmp" "*.temp" "*.log"
          )
          
          deleted_count=0
          total_size=0
          
          # Fun√ß√£o para verificar se √© arquivo essencial
          is_essential() {
            local file="$1"
            for essential in "${essential_files[@]}"; do
              if [[ "$file" == "$essential" ]] || [[ "$file" == .github/* ]]; then
                return 0
              fi
            done
            return 1
          }
          
          # Processar cada padr√£o
          for pattern in "${patterns_to_remove[@]}"; do
            for file in $pattern; do
              if [[ -f "$file" ]] && ! is_essential "$file"; then
                file_size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo "0")
                if rm -f "$file"; then
                  echo "üóëÔ∏è Deletado: $file ($((file_size/1024)) KB)"
                  ((deleted_count++))
                  ((total_size += file_size))
                fi
              fi
            done
          done
          
          echo "üìä Resumo da limpeza:"
          echo "   üìÅ Arquivos deletados: $deleted_count"
          echo "   üíæ Espa√ßo liberado: $((total_size/1024)) KB"

      - name: "üíæ Commit da Limpeza"
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          if git diff-index --quiet HEAD --; then
            echo "‚úÖ Nenhum arquivo para limpar"
          else
            git add -A
            git commit -m "üßπ Limpeza de arquivos tempor√°rios - $(TZ='America/Fortaleza' date '+%d/%m %H:%M')"
            git push "https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git" main
            echo "‚úÖ Limpeza commitada com sucesso"
          fi

  # ‚úÖ 3. JOB: Limpeza de Execu√ß√µes (CORRIGIDO)
  cleanup-runs:
    name: "üßπ Limpar Execu√ß√µes Antigas"
    runs-on: ubuntu-latest
    needs: cleanup-files
    timeout-minutes: 5
    
    if: >-
      (github.event.inputs.force_operation == 'all' ||
      github.event.inputs.force_operation == 'cleanup_runs') ||
      (github.event_name == 'schedule' && github.event.schedule == '1 */8 * * *')
    
    steps:
      - name: "üóëÔ∏è Limpar Execu√ß√µes Antigas do Workflow"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üöÄ Iniciando limpeza de execu√ß√µes antigas..."
          
          WORKFLOW_NAME="üîÑ Manuten√ß√£o Unificada (Playlists + Limpeza + Deploy)"
          KEEP_RUNS=3  # Manter as √∫ltimas 3 execu√ß√µes
          
          # Obter workflow ID
          echo "üìã Buscando ID do workflow..."
          WORKFLOW_ID=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows" \
            | jq -r --arg name "$WORKFLOW_NAME" '.workflows[] | select(.name == $name) | .id')
          
          if [[ -z "$WORKFLOW_ID" || "$WORKFLOW_ID" == "null" ]]; then
            echo "‚ùå N√£o foi poss√≠vel encontrar o workflow: $WORKFLOW_NAME"
            exit 1
          fi
          
          echo "üéØ Workflow ID: $WORKFLOW_ID"
          
          # Obter execu√ß√µes para deletar (todas exceto as √∫ltimas KEEP_RUNS)
          RUNS_JSON=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/$WORKFLOW_ID/runs?per_page=50&status=completed")
          
          OLD_RUN_IDS=$(echo "$RUNS_JSON" | jq -r ".workflow_runs[$KEEP_RUNS:] | .[] | select(.status == \"completed\") | .id")
          
          if [[ -z "$OLD_RUN_IDS" ]]; then
            echo "‚úÖ Nenhuma execu√ß√£o antiga para limpar"
            exit 0
          fi
          
          echo "üóëÔ∏è Encontradas $(echo "$OLD_RUN_IDS" | wc -w) execu√ß√µes para limpar"
          
          # Deletar execu√ß√µes
          counter=0
          for run_id in $OLD_RUN_IDS; do
            echo "üßπ Deletando execu√ß√£o: $run_id"
            response_code=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE \
              -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs/$run_id")
            
            if [[ "$response_code" == "204" ]]; then
              echo "‚úÖ Deletado: $run_id"
              ((counter++))
            else
              echo "‚ö†Ô∏è Erro ao deletar $run_id (HTTP $response_code)"
            fi
            
            sleep 0.5  # Evitar rate limiting
          done
          
          echo "üéâ Limpeza conclu√≠da: $counter execu√ß√µes removidas"

  # ‚úÖ 4. JOB: Deploy para GitHub Pages (CORRIGIDO)
  deploy-pages:
    name: "üöÄ Deploy GitHub Pages"
    runs-on: ubuntu-latest
    needs: cleanup-runs
    timeout-minutes: 8
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    if: >-
      (github.event.inputs.force_operation == 'all' ||
      github.event.inputs.force_operation == 'deploy') ||
      (github.event_name == 'schedule' && github.event.schedule == '25 10 * * *')
    
    steps:
      - name: "üîΩ Checkout do C√≥digo"
        uses: actions/checkout@v4

      - name: "üèóÔ∏è Configurar GitHub Pages"
        uses: actions/configure-pages@v4

      - name: "üì¶ Upload de Artefatos"
        uses: actions/upload-pages-artifact@v3
        with:
          path: .
          exclude-assets: |
            *.py
            *.sh
            .github/workflows/*
            scripts/
            *.tmp
            *.log

      - name: "üöÄ Fazer Deploy"
        id: deployment
        uses: actions/deploy-pages@v4

      - name: "üì¢ Status do Deploy"
        run: |
          if [[ "${{ steps.deployment.outcome }}" == "success" ]]; then
            echo "üéâ Deploy realizado com sucesso!"
            echo "üåê URL: ${{ steps.deployment.outputs.page_url }}"
          else
            echo "‚ùå Deploy falhou - verifique os logs acima"
            exit 1
          fi

  # ‚úÖ 5. JOB: Relat√≥rio Final
  report:
    name: "üìä Relat√≥rio de Execu√ß√£o"
    runs-on: ubuntu-latest
    needs: [process-playlists, cleanup-files, cleanup-runs, deploy-pages]
    if: always()
    
    steps:
      - name: "üìà Gerar Relat√≥rio Consolidado"
        run: |
          echo "================================================"
          echo "üìä RELAT√ìRIO DA MANUTEN√á√ÉO UNIFICADA"
          echo "================================================"
          echo "üïê Conclu√≠do em: $(TZ='America/Fortaleza' date '+%d/%m/%Y %H:%M:%S BRT')"
          echo "üîß Workflow: ${{ github.workflow }}"
          echo "üéØ Acionado por: ${{ github.event_name }}"
          echo ""
          echo "üìã STATUS DAS ETAPAS:"
          echo "---------------------"
          echo "üì• Processar Playlists: ${{ needs.process-playlists.result }}"
          echo "üóëÔ∏è Limpeza de Arquivos: ${{ needs.cleanup-files.result }}"
          echo "üßπ Limpeza de Execu√ß√µes: ${{ needs.cleanup-runs.result }}"
          echo "üöÄ Deploy GitHub Pages: ${{ needs.deploy-pages.result }}"
          echo ""
          
          # Verificar se todos foram bem-sucedidos
          if [[ "${{ needs.process-playlists.result }}" == "success" ]] && \
             [[ "${{ needs.cleanup-files.result }}" == "success" ]] && \
             [[ "${{ needs.cleanup-runs.result }}" == "success" ]] && \
             [[ "${{ needs.deploy-pages.result }}" == "success" ]]; then
            echo "‚úÖ STATUS GERAL: SUCESSO COMPLETO"
            echo "üéØ Todos os sistemas operando normalmente"
          else
            echo "‚ö†Ô∏è STATUS GERAL: ATEN√á√ÉO REQUERIDA"
            echo "üìù Algumas etapas podem precisar de verifica√ß√£o"
          fi
          echo "================================================"
